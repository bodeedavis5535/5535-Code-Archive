package org.usfirst.frc.team5535.robot;
import com.ctre.CANTalon;

import test.GripPipeline;
import org.opencv.core.Rect;
import org.opencv.imgproc.Imgproc;


import edu.wpi.cscore.UsbCamera;
import edu.wpi.first.wpilibj.CameraServer;
import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.vision.VisionRunner;
import edu.wpi.first.wpilibj.vision.VisionThread;
/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends IterativeRobot {
    final String defaultAuto = "Default";
    final String customAuto = "My Auto";
    
    private static final int IMG_WIDTH = 320;
    private static final int IMG_HEIGHT = 240;
    private VisionThread visionThread;
    private double centerX = 0.0;
    private RobotDrive ankDrive;
    
    private final Object imgLock = new Object();
    
    String autoSelected;
    SendableChooser<String> chooser = new SendableChooser<>();
    //CANTalon FR, FL, BR ,BL;
    //RobotDrive ankDrive;
    Joystick xbox;
    UsbCamera camera;

    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    @Override
    public void robotInit() {
   	 camera = CameraServer.getInstance().startAutomaticCapture();
   	 camera.setResolution(IMG_WIDTH, IMG_HEIGHT);
   	 visionThread = new VisionThread(camera, new GripPipeline(), pipeline -> {
   		 if (!pipeline.filterContoursOutput().isEmpty()) {
   			 Rect r = Imgproc.boundingRect(pipeline.filterContoursOutput().get(0));
   			 synchronized (imgLock) {
   				 centerX = r.x + (r.width / 2);
   			 
   		 
   			 }
   		 }
   	 });
   	 visionThread.start();
   	 //drive = new RobotDrive(1, 2);
    
   	 xbox = new Joystick(0);
   	 chooser.addDefault("Default Auto", defaultAuto);
   	 chooser.addObject("My Auto", customAuto);
   	 SmartDashboard.putData("Auto choices", chooser);
   	  CANTalon L1 = new CANTalon(4);
    	CANTalon L2 = new CANTalon(1);
    	CANTalon R1 = new CANTalon(2);
    	CANTalon R2 = new CANTalon(3);
   	// ankDrive = new RobotDrive(FL, BL, FR, BR);
        ankDrive = new RobotDrive(L1, L2, R1, R2);

    }

    /**
     * This autonomous (along with the chooser code above) shows how to select
     * between different autonomous modes using the dashboard. The sendable
     * chooser code works with the Java SmartDashboard. If you prefer the
     * LabVIEW Dashboard, remove all of the chooser code and uncomment the
     * getString line to get the auto name from the text box below the Gyro
     *
     * You can add additional auto modes by adding additional comparisons to the
     * switch structure below with additional strings. If using the
     * SendableChooser make sure to add them to the chooser code above as well.
     */
    @Override
    public void autonomousInit() {
   	 autoSelected = chooser.getSelected();
   	 // autoSelected = SmartDashboard.getString("Auto Selector",
   	 // defaultAuto);
   	 System.out.println("Auto selected: " + autoSelected);
   	 
    }

    /**
     * This function is called periodically during autonomous
     */
    @Override
    public void autonomousPeriodic() {
   	 double centerX;
   	 synchronized (imgLock) {
   		 centerX = this.centerX;
   	 
   	 }
   	 double turn = centerX - (IMG_WIDTH / 2);
   	 ankDrive.arcadeDrive(-0.6, turn * 0.005);
   	 
   	 switch (autoSelected) {
   	 case customAuto:
   		 // Put custom auto code here
   		 break;
   	 case defaultAuto:
   	 default:
   		 // Put default auto code here
   		 break;
   	 }
    }

    /**
     * This function is called periodically during operator control
     */
    public void teleopinit(){
   	 ankDrive.setMaxOutput(0.1);
   	 
    }
    @Override
    public void teleopPeriodic() {

   	 ankDrive.tankDrive((xbox.getRawAxis(1) * .5), (xbox.getRawAxis(5) * .5));
    }

    /**
     * This function is called periodically during test mode
     */
    @Override
    public void testPeriodic() {
    }
}



